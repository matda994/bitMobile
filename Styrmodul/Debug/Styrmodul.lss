
Styrmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  00800108  00800108  000004e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b31  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ee  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f2a  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010749  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b5  00000000  00000000  00012eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00013266  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000012a0  00000000  00000000  0001331e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	87 c1       	rjmp	.+782    	; 0x358 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ff c0       	rjmp	.+510    	; 0x258 <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c1       	rjmp	.+648    	; 0x2fa <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 3c       	cpi	r26, 0xC7	; 199
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7e d1       	rcall	.+764    	; 0x3c0 <main>
  c4:	bd c1       	rjmp	.+890    	; 0x440 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pid_Init>:
ï»¿#include "pid.h"
#include "stdint.h"

void pid_Init(int16_t p_factor, int16_t d_factor, struct PID_DATA *pid)
{
  c8:	fa 01       	movw	r30, r20
	pid->lastProcessValue = 0;
  ca:	11 82       	std	Z+1, r1	; 0x01
  cc:	10 82       	st	Z, r1
	pid->P_Factor = p_factor;
  ce:	93 83       	std	Z+3, r25	; 0x03
  d0:	82 83       	std	Z+2, r24	; 0x02
	pid->D_Factor = d_factor;
  d2:	75 83       	std	Z+5, r23	; 0x05
  d4:	64 83       	std	Z+4, r22	; 0x04
	pid->maxError    = MAX_INT / (pid->P_Factor + 1);
  d6:	bc 01       	movw	r22, r24
  d8:	6f 5f       	subi	r22, 0xFF	; 255
  da:	7f 4f       	sbci	r23, 0xFF	; 255
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	9f e7       	ldi	r25, 0x7F	; 127
  e0:	88 d1       	rcall	.+784    	; 0x3f2 <__divmodhi4>
  e2:	77 83       	std	Z+7, r23	; 0x07
  e4:	66 83       	std	Z+6, r22	; 0x06
  e6:	08 95       	ret

000000e8 <pid_Controller>:
}

int8_t pid_Controller(uint8_t referenceValue, uint8_t processValue, struct PID_DATA *pid_st)
{
  e8:	fa 01       	movw	r30, r20
	int16_t errors, p_term, d_term;
	int16_t ret;

	errors = referenceValue - processValue;
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	26 1b       	sub	r18, r22
  f2:	37 0b       	sbc	r19, r23

	if (errors > pid_st->maxError) {
  f4:	86 81       	ldd	r24, Z+6	; 0x06
  f6:	97 81       	ldd	r25, Z+7	; 0x07
  f8:	82 17       	cp	r24, r18
  fa:	93 07       	cpc	r25, r19
  fc:	84 f0       	brlt	.+32     	; 0x11e <pid_Controller+0x36>
		p_term = MAX_INT;
		} else if (errors < -pid_st->maxError) {
  fe:	91 95       	neg	r25
 100:	81 95       	neg	r24
 102:	91 09       	sbc	r25, r1
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	6c f0       	brlt	.+26     	; 0x124 <pid_Controller+0x3c>
		p_term = -MAX_INT;
		} else {
		p_term = pid_st->P_Factor * errors;
 10a:	82 81       	ldd	r24, Z+2	; 0x02
 10c:	93 81       	ldd	r25, Z+3	; 0x03
 10e:	28 9f       	mul	r18, r24
 110:	d0 01       	movw	r26, r0
 112:	29 9f       	mul	r18, r25
 114:	b0 0d       	add	r27, r0
 116:	38 9f       	mul	r19, r24
 118:	b0 0d       	add	r27, r0
 11a:	11 24       	eor	r1, r1
 11c:	05 c0       	rjmp	.+10     	; 0x128 <pid_Controller+0x40>
	int16_t ret;

	errors = referenceValue - processValue;

	if (errors > pid_st->maxError) {
		p_term = MAX_INT;
 11e:	af ef       	ldi	r26, 0xFF	; 255
 120:	bf e7       	ldi	r27, 0x7F	; 127
 122:	02 c0       	rjmp	.+4      	; 0x128 <pid_Controller+0x40>
		} else if (errors < -pid_st->maxError) {
		p_term = -MAX_INT;
 124:	a1 e0       	ldi	r26, 0x01	; 1
 126:	b0 e8       	ldi	r27, 0x80	; 128
		} else {
		p_term = pid_st->P_Factor * errors;
	}
	
	d_term = pid_st->D_Factor * -(pid_st->lastProcessValue - processValue);
 128:	20 81       	ld	r18, Z
 12a:	31 81       	ldd	r19, Z+1	; 0x01
 12c:	ab 01       	movw	r20, r22
 12e:	42 1b       	sub	r20, r18
 130:	53 0b       	sbc	r21, r19
 132:	24 81       	ldd	r18, Z+4	; 0x04
 134:	35 81       	ldd	r19, Z+5	; 0x05
 136:	42 9f       	mul	r20, r18
 138:	c0 01       	movw	r24, r0
 13a:	43 9f       	mul	r20, r19
 13c:	90 0d       	add	r25, r0
 13e:	52 9f       	mul	r21, r18
 140:	90 0d       	add	r25, r0
 142:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
 144:	71 83       	std	Z+1, r23	; 0x01
 146:	60 83       	st	Z, r22

	ret = (p_term + d_term) / SCALING_FACTOR;
 148:	8a 0f       	add	r24, r26
 14a:	9b 1f       	adc	r25, r27
 14c:	99 23       	and	r25, r25
 14e:	14 f4       	brge	.+4      	; 0x154 <pid_Controller+0x6c>
 150:	81 58       	subi	r24, 0x81	; 129
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	88 0f       	add	r24, r24
 156:	89 2f       	mov	r24, r25
 158:	88 1f       	adc	r24, r24
 15a:	99 0b       	sbc	r25, r25
		} else if (ret < -MAX_INT) {
		ret = -MAX_INT;
	}

	return ((int16_t)ret);
 15c:	08 95       	ret

0000015e <setESC>:
*/
void setESC(int counterEsc){

	if(counterEsc >= 2700 || counterEsc <= 2950)
	{
		OCR1A = counterEsc;
 15e:	90 93 89 00 	sts	0x0089, r25
 162:	80 93 88 00 	sts	0x0088, r24
 166:	08 95       	ret

00000168 <setServo>:
 * 3586 => 1.96 ms too much left
 * 3686 => 2.0 ms too much left
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT ){
 168:	20 91 04 01 	lds	r18, 0x0104
 16c:	30 91 05 01 	lds	r19, 0x0105
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	2c f0       	brlt	.+10     	; 0x180 <setServo+0x18>
		
		OCR1B =MAXRIGHT;
 176:	30 93 8b 00 	sts	0x008B, r19
 17a:	20 93 8a 00 	sts	0x008A, r18
 17e:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
 180:	20 91 06 01 	lds	r18, 0x0106
 184:	30 91 07 01 	lds	r19, 0x0107
 188:	82 17       	cp	r24, r18
 18a:	93 07       	cpc	r25, r19
 18c:	2c f0       	brlt	.+10     	; 0x198 <setServo+0x30>

		OCR1B = MAXLEFT;
 18e:	30 93 8b 00 	sts	0x008B, r19
 192:	20 93 8a 00 	sts	0x008A, r18
 196:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
 198:	90 93 8b 00 	sts	0x008B, r25
 19c:	80 93 8a 00 	sts	0x008A, r24
 1a0:	08 95       	ret

000001a2 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
 1c2:	80 91 92 01 	lds	r24, 0x0192
 1c6:	90 91 93 01 	lds	r25, 0x0193
 1ca:	80 34       	cpi	r24, 0x40	; 64
 1cc:	91 05       	cpc	r25, r1
 1ce:	31 f4       	brne	.+12     	; 0x1dc <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 9b 01 	sts	0x019B, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
 1d6:	80 91 c6 00 	lds	r24, 0x00C6
 1da:	16 c0       	rjmp	.+44     	; 0x208 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
 1dc:	80 34       	cpi	r24, 0x40	; 64
 1de:	91 05       	cpc	r25, r1
 1e0:	e8 f4       	brcc	.+58     	; 0x21c <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
 1e2:	e0 e9       	ldi	r30, 0x90	; 144
 1e4:	f1 e0       	ldi	r31, 0x01	; 1
 1e6:	20 81       	ld	r18, Z
 1e8:	31 81       	ldd	r19, Z+1	; 0x01
 1ea:	40 91 c6 00 	lds	r20, 0x00C6
 1ee:	d9 01       	movw	r26, r18
 1f0:	a2 5b       	subi	r26, 0xB2	; 178
 1f2:	be 4f       	sbci	r27, 0xFE	; 254
 1f4:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	31 83       	std	Z+1, r19	; 0x01
 1fc:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	90 93 93 01 	sts	0x0193, r25
 204:	80 93 92 01 	sts	0x0192, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
 208:	80 91 92 01 	lds	r24, 0x0192
 20c:	90 91 93 01 	lds	r25, 0x0193
 210:	80 34       	cpi	r24, 0x40	; 64
 212:	91 05       	cpc	r25, r1
 214:	19 f4       	brne	.+6      	; 0x21c <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 99 01 	sts	0x0199, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
 21c:	80 91 90 01 	lds	r24, 0x0190
 220:	90 91 91 01 	lds	r25, 0x0191
 224:	80 34       	cpi	r24, 0x40	; 64
 226:	91 05       	cpc	r25, r1
 228:	21 f4       	brne	.+8      	; 0x232 <__vector_20+0x90>
		rx_uart0.i_last = 0;
 22a:	10 92 91 01 	sts	0x0191, r1
 22e:	10 92 90 01 	sts	0x0190, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 98 01 	sts	0x0198, r24
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0b be       	out	0x3b, r0	; 59
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_22>:




ISR(USART0_TX_vect)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	0b b6       	in	r0, 0x3b	; 59
 264:	0f 92       	push	r0
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
 26e:	80 91 4c 01 	lds	r24, 0x014C
 272:	90 91 4d 01 	lds	r25, 0x014D
 276:	80 34       	cpi	r24, 0x40	; 64
 278:	91 05       	cpc	r25, r1
 27a:	19 f4       	brne	.+6      	; 0x282 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
 27c:	10 92 97 01 	sts	0x0197, r1
 280:	02 c0       	rjmp	.+4      	; 0x286 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
 282:	89 2b       	or	r24, r25
 284:	b9 f0       	breq	.+46     	; 0x2b4 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
 286:	e0 91 48 01 	lds	r30, 0x0148
 28a:	f0 91 49 01 	lds	r31, 0x0149
 28e:	e8 5f       	subi	r30, 0xF8	; 248
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
 298:	e8 e4       	ldi	r30, 0x48	; 72
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	80 81       	ld	r24, Z
 29e:	91 81       	ldd	r25, Z+1	; 0x01
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	91 83       	std	Z+1, r25	; 0x01
 2a4:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
 2a6:	ec e4       	ldi	r30, 0x4C	; 76
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	80 81       	ld	r24, Z
 2ac:	91 81       	ldd	r25, Z+1	; 0x01
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
 2b4:	80 91 48 01 	lds	r24, 0x0148
 2b8:	90 91 49 01 	lds	r25, 0x0149
 2bc:	80 34       	cpi	r24, 0x40	; 64
 2be:	91 05       	cpc	r25, r1
 2c0:	21 f4       	brne	.+8      	; 0x2ca <__vector_22+0x72>
		tx_uart0.i_first = 0;
 2c2:	10 92 49 01 	sts	0x0149, r1
 2c6:	10 92 48 01 	sts	0x0148, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
 2ca:	80 91 4c 01 	lds	r24, 0x014C
 2ce:	90 91 4d 01 	lds	r25, 0x014D
 2d2:	89 2b       	or	r24, r25
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
 2d6:	10 92 9a 01 	sts	0x019A, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
 2da:	e1 ec       	ldi	r30, 0xC1	; 193
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8f 7b       	andi	r24, 0xBF	; 191
 2e2:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_28>:
}

int16_t Get_Measurement(void) //TODO
{
	return 140;
}
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	0b b6       	in	r0, 0x3b	; 59
 306:	0f 92       	push	r0
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
 310:	80 91 ce 00 	lds	r24, 0x00CE
 314:	8f 3f       	cpi	r24, 0xFF	; 255
 316:	29 f4       	brne	.+10     	; 0x322 <__vector_28+0x28>
 318:	10 92 be 01 	sts	0x01BE, r1
 31c:	10 92 bd 01 	sts	0x01BD, r1
 320:	10 c0       	rjmp	.+32     	; 0x342 <__vector_28+0x48>
 322:	e0 91 bd 01 	lds	r30, 0x01BD
 326:	f0 91 be 01 	lds	r31, 0x01BE
 32a:	e3 56       	subi	r30, 0x63	; 99
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	80 83       	st	Z, r24
 330:	80 91 bd 01 	lds	r24, 0x01BD
 334:	90 91 be 01 	lds	r25, 0x01BE
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 be 01 	sts	0x01BE, r25
 33e:	80 93 bd 01 	sts	0x01BD, r24
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	0f 90       	pop	r0
 34c:	0b be       	out	0x3b, r0	; 59
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_18>:
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	80 91 94 01 	lds	r24, 0x0194
 36c:	90 91 95 01 	lds	r25, 0x0195
 370:	8b 39       	cpi	r24, 0x9B	; 155
 372:	26 e9       	ldi	r18, 0x96	; 150
 374:	92 07       	cpc	r25, r18
 376:	30 f4       	brcc	.+12     	; 0x384 <__vector_18+0x2c>
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	90 93 95 01 	sts	0x0195, r25
 37e:	80 93 94 01 	sts	0x0194, r24
 382:	09 c0       	rjmp	.+18     	; 0x396 <__vector_18+0x3e>
 384:	80 91 96 01 	lds	r24, 0x0196
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	80 93 96 01 	sts	0x0196, r24
 38e:	10 92 95 01 	sts	0x0195, r1
 392:	10 92 94 01 	sts	0x0194, r1
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <Init>:
 3a6:	4f eb       	ldi	r20, 0xBF	; 191
 3a8:	51 e0       	ldi	r21, 0x01	; 1
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	8a de       	rcall	.-748    	; 0xc8 <pid_Init>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	85 bd       	out	0x25, r24	; 37
 3b8:	80 93 6e 00 	sts	0x006E, r24
 3bc:	16 bc       	out	0x26, r1	; 38
 3be:	08 95       	ret

000003c0 <main>:

int main (void)
{
	
		Init();
 3c0:	f2 df       	rcall	.-28     	; 0x3a6 <Init>
		setESC(MANUAL_FORWARD);
 3c2:	80 91 00 01 	lds	r24, 0x0100
 3c6:	90 91 01 01 	lds	r25, 0x0101
 3ca:	c9 de       	rcall	.-622    	; 0x15e <setESC>
		int8_t inputValue = 0;
		
		referenceValue =   Get_Reference();
		measurementValue = Get_Measurement();
		
		inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
 3cc:	4f eb       	ldi	r20, 0xBF	; 191
 3ce:	51 e0       	ldi	r21, 0x01	; 1
 3d0:	6c e8       	ldi	r22, 0x8C	; 140
 3d2:	8d e7       	ldi	r24, 0x7D	; 125
 3d4:	89 de       	rcall	.-750    	; 0xe8 <pid_Controller>
		setServo(STRAIGHT+inputValue);
 3d6:	20 91 02 01 	lds	r18, 0x0102
 3da:	30 91 03 01 	lds	r19, 0x0103
 3de:	a9 01       	movw	r20, r18
 3e0:	48 0f       	add	r20, r24
 3e2:	51 1d       	adc	r21, r1
 3e4:	87 fd       	sbrc	r24, 7
 3e6:	5a 95       	dec	r21
 3e8:	ca 01       	movw	r24, r20
 3ea:	be de       	rcall	.-644    	; 0x168 <setServo>
				sei();
				
				
			}
		}*/
}
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <__divmodhi4>:
 3f2:	97 fb       	bst	r25, 7
 3f4:	07 2e       	mov	r0, r23
 3f6:	16 f4       	brtc	.+4      	; 0x3fc <__divmodhi4+0xa>
 3f8:	00 94       	com	r0
 3fa:	06 d0       	rcall	.+12     	; 0x408 <__divmodhi4_neg1>
 3fc:	77 fd       	sbrc	r23, 7
 3fe:	08 d0       	rcall	.+16     	; 0x410 <__divmodhi4_neg2>
 400:	0b d0       	rcall	.+22     	; 0x418 <__udivmodhi4>
 402:	07 fc       	sbrc	r0, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodhi4_neg2>
 406:	3e f4       	brtc	.+14     	; 0x416 <__divmodhi4_exit>

00000408 <__divmodhi4_neg1>:
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__udivmodhi4>:
 418:	aa 1b       	sub	r26, r26
 41a:	bb 1b       	sub	r27, r27
 41c:	51 e1       	ldi	r21, 0x11	; 17
 41e:	07 c0       	rjmp	.+14     	; 0x42e <__udivmodhi4_ep>

00000420 <__udivmodhi4_loop>:
 420:	aa 1f       	adc	r26, r26
 422:	bb 1f       	adc	r27, r27
 424:	a6 17       	cp	r26, r22
 426:	b7 07       	cpc	r27, r23
 428:	10 f0       	brcs	.+4      	; 0x42e <__udivmodhi4_ep>
 42a:	a6 1b       	sub	r26, r22
 42c:	b7 0b       	sbc	r27, r23

0000042e <__udivmodhi4_ep>:
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	5a 95       	dec	r21
 434:	a9 f7       	brne	.-22     	; 0x420 <__udivmodhi4_loop>
 436:	80 95       	com	r24
 438:	90 95       	com	r25
 43a:	bc 01       	movw	r22, r24
 43c:	cd 01       	movw	r24, r26
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
